pipeline {

  agent none

  environment {
    DOCKER_IMAGE = "hieubossgr/jenkins-docker-php"
  }

  stages {
//    stage("Test") {
//      agent { label 'master'}
//      steps {
//	sh "echo 'Hello world'"
//      }
//    }

    stage("Build PHP and unit test") {
      agent {
        docker {
          image 'allebb/phptestrunner-74:latest'
          args '-u 0:0 -v /tmp:/root/.cache'
        }
      }
      steps {
        echo 'Running PHP 7.4 tests...'
        sh 'php -v'
        echo 'Installing Composer'
        sh 'curl -sS https://getcomposer.org/installer | php '
        echo 'movie composer.phar to /usr/local/bin/composer'
        sh 'mv composer.phar /usr/local/bin/composer'
	echo 'Install phpunit'
	sh 'cd $WORKSPACE && composer require --dev phpunit/phpunit'
        echo 'Running PHPUnit tests...'
        sh '$WORKSPACE/vendor/bin/phpunit automation-test/tests'
      }
    }

    stage("build image") {
      agent { label 'master'}
      environment {
        DOCKER_TAG="${GIT_BRANCH.tokenize('/').pop()}-${GIT_COMMIT.substring(0,7)}"
      }
      steps {
        echo "cd to $WORKSPACE"
	sh "cd $WORKSPACE"
	echo "docker build"
        sh "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} . "
	echo "docker tag latest"
        sh "docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest"
        sh "docker image ls | grep ${DOCKER_IMAGE}"
	echo "Push dockerhub"
        withCredentials([usernamePassword(credentialsId: 'docker-hub', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
            sh 'echo $DOCKER_PASSWORD | docker login --username $DOCKER_USERNAME --password-stdin'
            sh "docker push ${DOCKER_IMAGE}:${DOCKER_TAG}"
            sh "docker push ${DOCKER_IMAGE}:latest"
        }


        //clean to save disk
        sh "docker image rm ${DOCKER_IMAGE}:${DOCKER_TAG}"
        sh "docker image rm ${DOCKER_IMAGE}:latest"
      }
    }

    stage("Deploy to staging") {
	agent { label 'master'}
	steps {
	  echo "Pull code to server web"
	  sh "/var/jenkins_home/test.sh"
	}    
    }
  }

  post {
    success {
      echo "SUCCESSFUL"
    }
    failure {
      echo "FAILED"
    }
  }
}
